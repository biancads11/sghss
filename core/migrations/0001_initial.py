# Generated by Django 5.2.5 on 2025-08-14 00:21

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessProfile',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updated_at')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('permissions_json', models.JSONField(blank=True, db_column='permissoes_json', null=True)),
            ],
            options={
                'verbose_name': 'Access Profile',
                'verbose_name_plural': 'Access Profiles',
                'db_table': 'perfis_acesso',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updated_at')),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('username', models.CharField(db_column='username', max_length=255, unique=True)),
                ('email', models.EmailField(db_column='email', max_length=255, unique=True)),
                ('password', models.CharField(db_column='password', max_length=255)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updated_at')),
                ('action', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, db_column='ip_origem', null=True)),
                ('was_successful', models.BooleanField(db_column='sucesso')),
                ('user', models.ForeignKey(db_column='usuario_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Access Log',
                'verbose_name_plural': 'Access Logs',
                'db_table': 'logs_acesso',
            },
        ),
        migrations.CreateModel(
            name='AuthenticationToken',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updated_at')),
                ('token_hash', models.TextField()),
                ('expiration', models.DateTimeField(db_column='expiracao')),
                ('is_active', models.BooleanField(db_column='ativo', default=True)),
                ('user', models.ForeignKey(db_column='usuario_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Authentication Token',
                'verbose_name_plural': 'Authentication Tokens',
                'db_table': 'tokens_autenticacao',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('group', models.ForeignKey(db_column='id_group', on_delete=django.db.models.deletion.CASCADE, related_name='user_relations', to='auth.group')),
                ('user', models.ForeignKey(db_column='id_user', on_delete=django.db.models.deletion.CASCADE, related_name='user_group_relations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_groups',
                'managed': True,
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='user_set', related_query_name='user', through='core.UserGroup', to='auth.group'),
        ),
    ]
